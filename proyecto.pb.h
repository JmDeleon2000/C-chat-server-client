// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proyecto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proyecto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proyecto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proyecto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proyecto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proyecto_2eproto;
namespace chat {
class ChangeStatus;
struct ChangeStatusDefaultTypeInternal;
extern ChangeStatusDefaultTypeInternal _ChangeStatus_default_instance_;
class ClientRequest;
struct ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class ConnectedUsers;
struct ConnectedUsersDefaultTypeInternal;
extern ConnectedUsersDefaultTypeInternal _ConnectedUsers_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class UserInformation;
struct UserInformationDefaultTypeInternal;
extern UserInformationDefaultTypeInternal _UserInformation_default_instance_;
class UserRegistration;
struct UserRegistrationDefaultTypeInternal;
extern UserRegistrationDefaultTypeInternal _UserRegistration_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ChangeStatus* Arena::CreateMaybeMessage<::chat::ChangeStatus>(Arena*);
template<> ::chat::ClientRequest* Arena::CreateMaybeMessage<::chat::ClientRequest>(Arena*);
template<> ::chat::ConnectedUsers* Arena::CreateMaybeMessage<::chat::ConnectedUsers>(Arena*);
template<> ::chat::Message* Arena::CreateMaybeMessage<::chat::Message>(Arena*);
template<> ::chat::ServerResponse* Arena::CreateMaybeMessage<::chat::ServerResponse>(Arena*);
template<> ::chat::UserInformation* Arena::CreateMaybeMessage<::chat::UserInformation>(Arena*);
template<> ::chat::UserRegistration* Arena::CreateMaybeMessage<::chat::UserRegistration>(Arena*);
template<> ::chat::UserRequest* Arena::CreateMaybeMessage<::chat::UserRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum ClientRequest_Option : int {
  ClientRequest_Option_USER_LOGIN = 0,
  ClientRequest_Option_CONNECTED_USERS = 1,
  ClientRequest_Option_USER_INFORMATION = 2,
  ClientRequest_Option_STATUS_CHANGE = 3,
  ClientRequest_Option_SEND_MESSAGE = 4
};
bool ClientRequest_Option_IsValid(int value);
constexpr ClientRequest_Option ClientRequest_Option_Option_MIN = ClientRequest_Option_USER_LOGIN;
constexpr ClientRequest_Option ClientRequest_Option_Option_MAX = ClientRequest_Option_SEND_MESSAGE;
constexpr int ClientRequest_Option_Option_ARRAYSIZE = ClientRequest_Option_Option_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientRequest_Option_descriptor();
template<typename T>
inline const std::string& ClientRequest_Option_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientRequest_Option>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientRequest_Option_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientRequest_Option_descriptor(), enum_t_value);
}
inline bool ClientRequest_Option_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientRequest_Option* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientRequest_Option>(
    ClientRequest_Option_descriptor(), name, value);
}
enum ServerResponse_Option : int {
  ServerResponse_Option_USER_LOGIN = 0,
  ServerResponse_Option_CONNECTED_USERS = 1,
  ServerResponse_Option_USER_INFORMATION = 2,
  ServerResponse_Option_STATUS_CHANGE = 3,
  ServerResponse_Option_SEND_MESSAGE = 4
};
bool ServerResponse_Option_IsValid(int value);
constexpr ServerResponse_Option ServerResponse_Option_Option_MIN = ServerResponse_Option_USER_LOGIN;
constexpr ServerResponse_Option ServerResponse_Option_Option_MAX = ServerResponse_Option_SEND_MESSAGE;
constexpr int ServerResponse_Option_Option_ARRAYSIZE = ServerResponse_Option_Option_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerResponse_Option_descriptor();
template<typename T>
inline const std::string& ServerResponse_Option_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerResponse_Option>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerResponse_Option_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerResponse_Option_descriptor(), enum_t_value);
}
inline bool ServerResponse_Option_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerResponse_Option* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerResponse_Option>(
    ServerResponse_Option_descriptor(), name, value);
}
enum ServerResponse_Code : int {
  ServerResponse_Code_FAILED_OPERATION = 0,
  ServerResponse_Code_SUCCESSFUL_OPERATION = 1
};
bool ServerResponse_Code_IsValid(int value);
constexpr ServerResponse_Code ServerResponse_Code_Code_MIN = ServerResponse_Code_FAILED_OPERATION;
constexpr ServerResponse_Code ServerResponse_Code_Code_MAX = ServerResponse_Code_SUCCESSFUL_OPERATION;
constexpr int ServerResponse_Code_Code_ARRAYSIZE = ServerResponse_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerResponse_Code_descriptor();
template<typename T>
inline const std::string& ServerResponse_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerResponse_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerResponse_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerResponse_Code_descriptor(), enum_t_value);
}
inline bool ServerResponse_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerResponse_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerResponse_Code>(
    ServerResponse_Code_descriptor(), name, value);
}
// ===================================================================

class UserRegistration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserRegistration) */ {
 public:
  inline UserRegistration() : UserRegistration(nullptr) {}
  ~UserRegistration() override;
  explicit PROTOBUF_CONSTEXPR UserRegistration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegistration(const UserRegistration& from);
  UserRegistration(UserRegistration&& from) noexcept
    : UserRegistration() {
    *this = ::std::move(from);
  }

  inline UserRegistration& operator=(const UserRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegistration& operator=(UserRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegistration* internal_default_instance() {
    return reinterpret_cast<const UserRegistration*>(
               &_UserRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRegistration& a, UserRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegistration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegistration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRegistration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserRegistration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegistration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserRegistration";
  }
  protected:
  explicit UserRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.UserRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChangeStatus) */ {
 public:
  inline ChangeStatus() : ChangeStatus(nullptr) {}
  ~ChangeStatus() override;
  explicit PROTOBUF_CONSTEXPR ChangeStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeStatus(const ChangeStatus& from);
  ChangeStatus(ChangeStatus&& from) noexcept
    : ChangeStatus() {
    *this = ::std::move(from);
  }

  inline ChangeStatus& operator=(const ChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatus& operator=(ChangeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeStatus* internal_default_instance() {
    return reinterpret_cast<const ChangeStatus*>(
               &_ChangeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChangeStatus& a, ChangeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangeStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChangeStatus";
  }
  protected:
  explicit ChangeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChangeStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverFieldNumber = 1,
    kSenderFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // optional string receiver = 1;
  bool has_receiver() const;
  private:
  bool _internal_has_receiver() const;
  public:
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // optional string sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // optional string text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:chat.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class UserInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserInformation) */ {
 public:
  inline UserInformation() : UserInformation(nullptr) {}
  ~UserInformation() override;
  explicit PROTOBUF_CONSTEXPR UserInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInformation(const UserInformation& from);
  UserInformation(UserInformation&& from) noexcept
    : UserInformation() {
    *this = ::std::move(from);
  }

  inline UserInformation& operator=(const UserInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInformation& operator=(UserInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInformation* internal_default_instance() {
    return reinterpret_cast<const UserInformation*>(
               &_UserInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserInformation& a, UserInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserInformation";
  }
  protected:
  explicit UserInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:chat.UserInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional string user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:chat.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class ConnectedUsers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ConnectedUsers) */ {
 public:
  inline ConnectedUsers() : ConnectedUsers(nullptr) {}
  ~ConnectedUsers() override;
  explicit PROTOBUF_CONSTEXPR ConnectedUsers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectedUsers(const ConnectedUsers& from);
  ConnectedUsers(ConnectedUsers&& from) noexcept
    : ConnectedUsers() {
    *this = ::std::move(from);
  }

  inline ConnectedUsers& operator=(const ConnectedUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedUsers& operator=(ConnectedUsers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectedUsers& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectedUsers* internal_default_instance() {
    return reinterpret_cast<const ConnectedUsers*>(
               &_ConnectedUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConnectedUsers& a, ConnectedUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectedUsers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectedUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectedUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectedUsers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectedUsers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectedUsers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectedUsers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ConnectedUsers";
  }
  protected:
  explicit ConnectedUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .chat.UserInformation users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::chat::UserInformation* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInformation >*
      mutable_users();
  private:
  const ::chat::UserInformation& _internal_users(int index) const;
  ::chat::UserInformation* _internal_add_users();
  public:
  const ::chat::UserInformation& users(int index) const;
  ::chat::UserInformation* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInformation >&
      users() const;

  // @@protoc_insertion_point(class_scope:chat.ConnectedUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInformation > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class ClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {}
  ~ClientRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientRequest(const ClientRequest& from);
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ClientRequest";
  }
  protected:
  explicit ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientRequest_Option Option;
  static constexpr Option USER_LOGIN =
    ClientRequest_Option_USER_LOGIN;
  static constexpr Option CONNECTED_USERS =
    ClientRequest_Option_CONNECTED_USERS;
  static constexpr Option USER_INFORMATION =
    ClientRequest_Option_USER_INFORMATION;
  static constexpr Option STATUS_CHANGE =
    ClientRequest_Option_STATUS_CHANGE;
  static constexpr Option SEND_MESSAGE =
    ClientRequest_Option_SEND_MESSAGE;
  static inline bool Option_IsValid(int value) {
    return ClientRequest_Option_IsValid(value);
  }
  static constexpr Option Option_MIN =
    ClientRequest_Option_Option_MIN;
  static constexpr Option Option_MAX =
    ClientRequest_Option_Option_MAX;
  static constexpr int Option_ARRAYSIZE =
    ClientRequest_Option_Option_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Option_descriptor() {
    return ClientRequest_Option_descriptor();
  }
  template<typename T>
  static inline const std::string& Option_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Option>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Option_Name.");
    return ClientRequest_Option_Name(enum_t_value);
  }
  static inline bool Option_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Option* value) {
    return ClientRequest_Option_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewuserFieldNumber = 2,
    kUserFieldNumber = 3,
    kStatusFieldNumber = 4,
    kMessageFieldNumber = 5,
    kOptionFieldNumber = 1,
  };
  // optional .chat.UserRegistration newuser = 2;
  bool has_newuser() const;
  private:
  bool _internal_has_newuser() const;
  public:
  void clear_newuser();
  const ::chat::UserRegistration& newuser() const;
  PROTOBUF_NODISCARD ::chat::UserRegistration* release_newuser();
  ::chat::UserRegistration* mutable_newuser();
  void set_allocated_newuser(::chat::UserRegistration* newuser);
  private:
  const ::chat::UserRegistration& _internal_newuser() const;
  ::chat::UserRegistration* _internal_mutable_newuser();
  public:
  void unsafe_arena_set_allocated_newuser(
      ::chat::UserRegistration* newuser);
  ::chat::UserRegistration* unsafe_arena_release_newuser();

  // optional .chat.UserRequest user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::chat::UserRequest& user() const;
  PROTOBUF_NODISCARD ::chat::UserRequest* release_user();
  ::chat::UserRequest* mutable_user();
  void set_allocated_user(::chat::UserRequest* user);
  private:
  const ::chat::UserRequest& _internal_user() const;
  ::chat::UserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::chat::UserRequest* user);
  ::chat::UserRequest* unsafe_arena_release_user();

  // optional .chat.ChangeStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::chat::ChangeStatus& status() const;
  PROTOBUF_NODISCARD ::chat::ChangeStatus* release_status();
  ::chat::ChangeStatus* mutable_status();
  void set_allocated_status(::chat::ChangeStatus* status);
  private:
  const ::chat::ChangeStatus& _internal_status() const;
  ::chat::ChangeStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::chat::ChangeStatus* status);
  ::chat::ChangeStatus* unsafe_arena_release_status();

  // optional .chat.Message message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::Message& message() const;
  PROTOBUF_NODISCARD ::chat::Message* release_message();
  ::chat::Message* mutable_message();
  void set_allocated_message(::chat::Message* message);
  private:
  const ::chat::Message& _internal_message() const;
  ::chat::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::chat::Message* message);
  ::chat::Message* unsafe_arena_release_message();

  // optional .chat.ClientRequest.Option option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  ::chat::ClientRequest_Option option() const;
  void set_option(::chat::ClientRequest_Option value);
  private:
  ::chat::ClientRequest_Option _internal_option() const;
  void _internal_set_option(::chat::ClientRequest_Option value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::chat::UserRegistration* newuser_;
  ::chat::UserRequest* user_;
  ::chat::ChangeStatus* status_;
  ::chat::Message* message_;
  int option_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  explicit PROTOBUF_CONSTEXPR ServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerResponse_Option Option;
  static constexpr Option USER_LOGIN =
    ServerResponse_Option_USER_LOGIN;
  static constexpr Option CONNECTED_USERS =
    ServerResponse_Option_CONNECTED_USERS;
  static constexpr Option USER_INFORMATION =
    ServerResponse_Option_USER_INFORMATION;
  static constexpr Option STATUS_CHANGE =
    ServerResponse_Option_STATUS_CHANGE;
  static constexpr Option SEND_MESSAGE =
    ServerResponse_Option_SEND_MESSAGE;
  static inline bool Option_IsValid(int value) {
    return ServerResponse_Option_IsValid(value);
  }
  static constexpr Option Option_MIN =
    ServerResponse_Option_Option_MIN;
  static constexpr Option Option_MAX =
    ServerResponse_Option_Option_MAX;
  static constexpr int Option_ARRAYSIZE =
    ServerResponse_Option_Option_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Option_descriptor() {
    return ServerResponse_Option_descriptor();
  }
  template<typename T>
  static inline const std::string& Option_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Option>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Option_Name.");
    return ServerResponse_Option_Name(enum_t_value);
  }
  static inline bool Option_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Option* value) {
    return ServerResponse_Option_Parse(name, value);
  }

  typedef ServerResponse_Code Code;
  static constexpr Code FAILED_OPERATION =
    ServerResponse_Code_FAILED_OPERATION;
  static constexpr Code SUCCESSFUL_OPERATION =
    ServerResponse_Code_SUCCESSFUL_OPERATION;
  static inline bool Code_IsValid(int value) {
    return ServerResponse_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    ServerResponse_Code_Code_MIN;
  static constexpr Code Code_MAX =
    ServerResponse_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    ServerResponse_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return ServerResponse_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return ServerResponse_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return ServerResponse_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kUsersFieldNumber = 4,
    kUserFieldNumber = 5,
    kMessageFieldNumber = 6,
    kStatusFieldNumber = 7,
    kOptionFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // optional string response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // optional .chat.ConnectedUsers users = 4;
  bool has_users() const;
  private:
  bool _internal_has_users() const;
  public:
  void clear_users();
  const ::chat::ConnectedUsers& users() const;
  PROTOBUF_NODISCARD ::chat::ConnectedUsers* release_users();
  ::chat::ConnectedUsers* mutable_users();
  void set_allocated_users(::chat::ConnectedUsers* users);
  private:
  const ::chat::ConnectedUsers& _internal_users() const;
  ::chat::ConnectedUsers* _internal_mutable_users();
  public:
  void unsafe_arena_set_allocated_users(
      ::chat::ConnectedUsers* users);
  ::chat::ConnectedUsers* unsafe_arena_release_users();

  // optional .chat.UserInformation user = 5;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::chat::UserInformation& user() const;
  PROTOBUF_NODISCARD ::chat::UserInformation* release_user();
  ::chat::UserInformation* mutable_user();
  void set_allocated_user(::chat::UserInformation* user);
  private:
  const ::chat::UserInformation& _internal_user() const;
  ::chat::UserInformation* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::chat::UserInformation* user);
  ::chat::UserInformation* unsafe_arena_release_user();

  // optional .chat.Message message = 6;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::Message& message() const;
  PROTOBUF_NODISCARD ::chat::Message* release_message();
  ::chat::Message* mutable_message();
  void set_allocated_message(::chat::Message* message);
  private:
  const ::chat::Message& _internal_message() const;
  ::chat::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::chat::Message* message);
  ::chat::Message* unsafe_arena_release_message();

  // optional .chat.ChangeStatus status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::chat::ChangeStatus& status() const;
  PROTOBUF_NODISCARD ::chat::ChangeStatus* release_status();
  ::chat::ChangeStatus* mutable_status();
  void set_allocated_status(::chat::ChangeStatus* status);
  private:
  const ::chat::ChangeStatus& _internal_status() const;
  ::chat::ChangeStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::chat::ChangeStatus* status);
  ::chat::ChangeStatus* unsafe_arena_release_status();

  // optional .chat.ServerResponse.Option option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  ::chat::ServerResponse_Option option() const;
  void set_option(::chat::ServerResponse_Option value);
  private:
  ::chat::ServerResponse_Option _internal_option() const;
  void _internal_set_option(::chat::ServerResponse_Option value);
  public:

  // optional .chat.ServerResponse.Code code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::chat::ServerResponse_Code code() const;
  void set_code(::chat::ServerResponse_Code value);
  private:
  ::chat::ServerResponse_Code _internal_code() const;
  void _internal_set_code(::chat::ServerResponse_Code value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::chat::ConnectedUsers* users_;
  ::chat::UserInformation* user_;
  ::chat::Message* message_;
  ::chat::ChangeStatus* status_;
  int option_;
  int code_;
  friend struct ::TableStruct_proyecto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegistration

// optional string username = 1;
inline bool UserRegistration::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRegistration::has_username() const {
  return _internal_has_username();
}
inline void UserRegistration::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRegistration::username() const {
  // @@protoc_insertion_point(field_get:chat.UserRegistration.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegistration::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserRegistration.username)
}
inline std::string* UserRegistration::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserRegistration.username)
  return _s;
}
inline const std::string& UserRegistration::_internal_username() const {
  return username_.Get();
}
inline void UserRegistration::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegistration::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegistration::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserRegistration.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegistration::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegistration.username)
}

// optional string ip = 2;
inline bool UserRegistration::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserRegistration::has_ip() const {
  return _internal_has_ip();
}
inline void UserRegistration::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserRegistration::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserRegistration.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegistration::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserRegistration.ip)
}
inline std::string* UserRegistration::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:chat.UserRegistration.ip)
  return _s;
}
inline const std::string& UserRegistration::_internal_ip() const {
  return ip_.Get();
}
inline void UserRegistration::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegistration::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegistration::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UserRegistration.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegistration::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegistration.ip)
}

// -------------------------------------------------------------------

// ChangeStatus

// optional string username = 1;
inline bool ChangeStatus::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeStatus::has_username() const {
  return _internal_has_username();
}
inline void ChangeStatus::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeStatus::username() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatus::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.username)
}
inline std::string* ChangeStatus::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.username)
  return _s;
}
inline const std::string& ChangeStatus::_internal_username() const {
  return username_.Get();
}
inline void ChangeStatus::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeStatus::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeStatus::release_username() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatus.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangeStatus::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.username)
}

// optional string status = 2;
inline bool ChangeStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeStatus::has_status() const {
  return _internal_has_status();
}
inline void ChangeStatus::clear_status() {
  status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChangeStatus::status() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatus::set_status(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.status)
}
inline std::string* ChangeStatus::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.status)
  return _s;
}
inline const std::string& ChangeStatus::_internal_status() const {
  return status_.Get();
}
inline void ChangeStatus::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeStatus::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000002u;
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeStatus::release_status() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatus.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = status_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangeStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.status)
}

// -------------------------------------------------------------------

// Message

// optional string receiver = 1;
inline bool Message::_internal_has_receiver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_receiver() const {
  return _internal_has_receiver();
}
inline void Message::clear_receiver() {
  receiver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message::receiver() const {
  // @@protoc_insertion_point(field_get:chat.Message.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_receiver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 receiver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.Message.receiver)
}
inline std::string* Message::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:chat.Message.receiver)
  return _s;
}
inline const std::string& Message::_internal_receiver() const {
  return receiver_.Get();
}
inline void Message::_internal_set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_receiver() {
  _has_bits_[0] |= 0x00000001u;
  return receiver_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_receiver() {
  // @@protoc_insertion_point(field_release:chat.Message.receiver)
  if (!_internal_has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = receiver_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault()) {
    receiver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_.SetAllocated(receiver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault()) {
    receiver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.Message.receiver)
}

// optional string sender = 2;
inline bool Message::_internal_has_sender() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_sender() const {
  return _internal_has_sender();
}
inline void Message::clear_sender() {
  sender_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message::sender() const {
  // @@protoc_insertion_point(field_get:chat.Message.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_sender(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.Message.sender)
}
inline std::string* Message::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:chat.Message.sender)
  return _s;
}
inline const std::string& Message::_internal_sender() const {
  return sender_.Get();
}
inline void Message::_internal_set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  return sender_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_sender() {
  // @@protoc_insertion_point(field_release:chat.Message.sender)
  if (!_internal_has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sender_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault()) {
    sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault()) {
    sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.Message.sender)
}

// optional string text = 3;
inline bool Message::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_text() const {
  return _internal_has_text();
}
inline void Message::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message::text() const {
  // @@protoc_insertion_point(field_get:chat.Message.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.Message.text)
}
inline std::string* Message::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:chat.Message.text)
  return _s;
}
inline const std::string& Message::_internal_text() const {
  return text_.Get();
}
inline void Message::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000004u;
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_text() {
  // @@protoc_insertion_point(field_release:chat.Message.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.Message.text)
}

// -------------------------------------------------------------------

// UserInformation

// optional string username = 1;
inline bool UserInformation::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInformation::has_username() const {
  return _internal_has_username();
}
inline void UserInformation::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInformation::username() const {
  // @@protoc_insertion_point(field_get:chat.UserInformation.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInformation::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserInformation.username)
}
inline std::string* UserInformation::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserInformation.username)
  return _s;
}
inline const std::string& UserInformation::_internal_username() const {
  return username_.Get();
}
inline void UserInformation::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInformation::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInformation::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserInformation.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInformation::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInformation.username)
}

// optional string ip = 2;
inline bool UserInformation::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInformation::has_ip() const {
  return _internal_has_ip();
}
inline void UserInformation::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInformation::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserInformation.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInformation::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserInformation.ip)
}
inline std::string* UserInformation::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:chat.UserInformation.ip)
  return _s;
}
inline const std::string& UserInformation::_internal_ip() const {
  return ip_.Get();
}
inline void UserInformation::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInformation::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInformation::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UserInformation.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInformation::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInformation.ip)
}

// optional string status = 3;
inline bool UserInformation::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInformation::has_status() const {
  return _internal_has_status();
}
inline void UserInformation::clear_status() {
  status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserInformation::status() const {
  // @@protoc_insertion_point(field_get:chat.UserInformation.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInformation::set_status(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserInformation.status)
}
inline std::string* UserInformation::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.UserInformation.status)
  return _s;
}
inline const std::string& UserInformation::_internal_status() const {
  return status_.Get();
}
inline void UserInformation::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInformation::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000004u;
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInformation::release_status() {
  // @@protoc_insertion_point(field_release:chat.UserInformation.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = status_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInformation::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInformation.status)
}

// -------------------------------------------------------------------

// UserRequest

// optional string user = 1;
inline bool UserRequest::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRequest::has_user() const {
  return _internal_has_user();
}
inline void UserRequest::clear_user() {
  user_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRequest::user() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRequest::set_user(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserRequest.user)
}
inline std::string* UserRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.user)
  return _s;
}
inline const std::string& UserRequest::_internal_user() const {
  return user_.Get();
}
inline void UserRequest::_internal_set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRequest::_internal_mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  return user_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRequest::release_user() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.user)
  if (!_internal_has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_.IsDefault()) {
    user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_.IsDefault()) {
    user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.user)
}

// -------------------------------------------------------------------

// ConnectedUsers

// repeated .chat.UserInformation users = 1;
inline int ConnectedUsers::_internal_users_size() const {
  return users_.size();
}
inline int ConnectedUsers::users_size() const {
  return _internal_users_size();
}
inline void ConnectedUsers::clear_users() {
  users_.Clear();
}
inline ::chat::UserInformation* ConnectedUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUsers.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInformation >*
ConnectedUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:chat.ConnectedUsers.users)
  return &users_;
}
inline const ::chat::UserInformation& ConnectedUsers::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::chat::UserInformation& ConnectedUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUsers.users)
  return _internal_users(index);
}
inline ::chat::UserInformation* ConnectedUsers::_internal_add_users() {
  return users_.Add();
}
inline ::chat::UserInformation* ConnectedUsers::add_users() {
  ::chat::UserInformation* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:chat.ConnectedUsers.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInformation >&
ConnectedUsers::users() const {
  // @@protoc_insertion_point(field_list:chat.ConnectedUsers.users)
  return users_;
}

// -------------------------------------------------------------------

// ClientRequest

// optional .chat.ClientRequest.Option option = 1;
inline bool ClientRequest::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientRequest::has_option() const {
  return _internal_has_option();
}
inline void ClientRequest::clear_option() {
  option_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::chat::ClientRequest_Option ClientRequest::_internal_option() const {
  return static_cast< ::chat::ClientRequest_Option >(option_);
}
inline ::chat::ClientRequest_Option ClientRequest::option() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.option)
  return _internal_option();
}
inline void ClientRequest::_internal_set_option(::chat::ClientRequest_Option value) {
  assert(::chat::ClientRequest_Option_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  option_ = value;
}
inline void ClientRequest::set_option(::chat::ClientRequest_Option value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ClientRequest.option)
}

// optional .chat.UserRegistration newuser = 2;
inline bool ClientRequest::_internal_has_newuser() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || newuser_ != nullptr);
  return value;
}
inline bool ClientRequest::has_newuser() const {
  return _internal_has_newuser();
}
inline void ClientRequest::clear_newuser() {
  if (newuser_ != nullptr) newuser_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::chat::UserRegistration& ClientRequest::_internal_newuser() const {
  const ::chat::UserRegistration* p = newuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserRegistration&>(
      ::chat::_UserRegistration_default_instance_);
}
inline const ::chat::UserRegistration& ClientRequest::newuser() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.newuser)
  return _internal_newuser();
}
inline void ClientRequest::unsafe_arena_set_allocated_newuser(
    ::chat::UserRegistration* newuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newuser_);
  }
  newuser_ = newuser;
  if (newuser) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientRequest.newuser)
}
inline ::chat::UserRegistration* ClientRequest::release_newuser() {
  _has_bits_[0] &= ~0x00000001u;
  ::chat::UserRegistration* temp = newuser_;
  newuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::UserRegistration* ClientRequest::unsafe_arena_release_newuser() {
  // @@protoc_insertion_point(field_release:chat.ClientRequest.newuser)
  _has_bits_[0] &= ~0x00000001u;
  ::chat::UserRegistration* temp = newuser_;
  newuser_ = nullptr;
  return temp;
}
inline ::chat::UserRegistration* ClientRequest::_internal_mutable_newuser() {
  _has_bits_[0] |= 0x00000001u;
  if (newuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserRegistration>(GetArenaForAllocation());
    newuser_ = p;
  }
  return newuser_;
}
inline ::chat::UserRegistration* ClientRequest::mutable_newuser() {
  ::chat::UserRegistration* _msg = _internal_mutable_newuser();
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.newuser)
  return _msg;
}
inline void ClientRequest::set_allocated_newuser(::chat::UserRegistration* newuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete newuser_;
  }
  if (newuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newuser);
    if (message_arena != submessage_arena) {
      newuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newuser, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  newuser_ = newuser;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.newuser)
}

// optional .chat.UserRequest user = 3;
inline bool ClientRequest::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || user_ != nullptr);
  return value;
}
inline bool ClientRequest::has_user() const {
  return _internal_has_user();
}
inline void ClientRequest::clear_user() {
  if (user_ != nullptr) user_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::UserRequest& ClientRequest::_internal_user() const {
  const ::chat::UserRequest* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserRequest&>(
      ::chat::_UserRequest_default_instance_);
}
inline const ::chat::UserRequest& ClientRequest::user() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.user)
  return _internal_user();
}
inline void ClientRequest::unsafe_arena_set_allocated_user(
    ::chat::UserRequest* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientRequest.user)
}
inline ::chat::UserRequest* ClientRequest::release_user() {
  _has_bits_[0] &= ~0x00000002u;
  ::chat::UserRequest* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::UserRequest* ClientRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:chat.ClientRequest.user)
  _has_bits_[0] &= ~0x00000002u;
  ::chat::UserRequest* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::chat::UserRequest* ClientRequest::_internal_mutable_user() {
  _has_bits_[0] |= 0x00000002u;
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserRequest>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::chat::UserRequest* ClientRequest::mutable_user() {
  ::chat::UserRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.user)
  return _msg;
}
inline void ClientRequest::set_allocated_user(::chat::UserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.user)
}

// optional .chat.ChangeStatus status = 4;
inline bool ClientRequest::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool ClientRequest::has_status() const {
  return _internal_has_status();
}
inline void ClientRequest::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::ChangeStatus& ClientRequest::_internal_status() const {
  const ::chat::ChangeStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ChangeStatus&>(
      ::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& ClientRequest::status() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.status)
  return _internal_status();
}
inline void ClientRequest::unsafe_arena_set_allocated_status(
    ::chat::ChangeStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientRequest.status)
}
inline ::chat::ChangeStatus* ClientRequest::release_status() {
  _has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::ChangeStatus* ClientRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:chat.ClientRequest.status)
  _has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* ClientRequest::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000004u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::chat::ChangeStatus* ClientRequest::mutable_status() {
  ::chat::ChangeStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.status)
  return _msg;
}
inline void ClientRequest::set_allocated_status(::chat::ChangeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.status)
}

// optional .chat.Message message = 5;
inline bool ClientRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool ClientRequest::has_message() const {
  return _internal_has_message();
}
inline void ClientRequest::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::Message& ClientRequest::_internal_message() const {
  const ::chat::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::Message&>(
      ::chat::_Message_default_instance_);
}
inline const ::chat::Message& ClientRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.message)
  return _internal_message();
}
inline void ClientRequest::unsafe_arena_set_allocated_message(
    ::chat::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientRequest.message)
}
inline ::chat::Message* ClientRequest::release_message() {
  _has_bits_[0] &= ~0x00000008u;
  ::chat::Message* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::Message* ClientRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:chat.ClientRequest.message)
  _has_bits_[0] &= ~0x00000008u;
  ::chat::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::chat::Message* ClientRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000008u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::Message>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::chat::Message* ClientRequest::mutable_message() {
  ::chat::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.message)
  return _msg;
}
inline void ClientRequest::set_allocated_message(::chat::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.message)
}

// -------------------------------------------------------------------

// ServerResponse

// optional .chat.ServerResponse.Option option = 1;
inline bool ServerResponse::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServerResponse::has_option() const {
  return _internal_has_option();
}
inline void ServerResponse::clear_option() {
  option_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::chat::ServerResponse_Option ServerResponse::_internal_option() const {
  return static_cast< ::chat::ServerResponse_Option >(option_);
}
inline ::chat::ServerResponse_Option ServerResponse::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.option)
  return _internal_option();
}
inline void ServerResponse::_internal_set_option(::chat::ServerResponse_Option value) {
  assert(::chat::ServerResponse_Option_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  option_ = value;
}
inline void ServerResponse::set_option(::chat::ServerResponse_Option value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.option)
}

// optional .chat.ServerResponse.Code code = 2;
inline bool ServerResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServerResponse::has_code() const {
  return _internal_has_code();
}
inline void ServerResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::chat::ServerResponse_Code ServerResponse::_internal_code() const {
  return static_cast< ::chat::ServerResponse_Code >(code_);
}
inline ::chat::ServerResponse_Code ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.code)
  return _internal_code();
}
inline void ServerResponse::_internal_set_code(::chat::ServerResponse_Code value) {
  assert(::chat::ServerResponse_Code_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  code_ = value;
}
inline void ServerResponse::set_code(::chat::ServerResponse_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.code)
}

// optional string response = 3;
inline bool ServerResponse::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerResponse::has_response() const {
  return _internal_has_response();
}
inline void ServerResponse::clear_response() {
  response_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerResponse::response() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerResponse::set_response(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 response_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ServerResponse.response)
}
inline std::string* ServerResponse::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.response)
  return _s;
}
inline const std::string& ServerResponse::_internal_response() const {
  return response_.Get();
}
inline void ServerResponse::_internal_set_response(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  response_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerResponse::_internal_mutable_response() {
  _has_bits_[0] |= 0x00000001u;
  return response_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerResponse::release_response() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.response)
  if (!_internal_has_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = response_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (response_.IsDefault()) {
    response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  response_.SetAllocated(response, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (response_.IsDefault()) {
    response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.response)
}

// optional .chat.ConnectedUsers users = 4;
inline bool ServerResponse::_internal_has_users() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || users_ != nullptr);
  return value;
}
inline bool ServerResponse::has_users() const {
  return _internal_has_users();
}
inline void ServerResponse::clear_users() {
  if (users_ != nullptr) users_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::ConnectedUsers& ServerResponse::_internal_users() const {
  const ::chat::ConnectedUsers* p = users_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ConnectedUsers&>(
      ::chat::_ConnectedUsers_default_instance_);
}
inline const ::chat::ConnectedUsers& ServerResponse::users() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.users)
  return _internal_users();
}
inline void ServerResponse::unsafe_arena_set_allocated_users(
    ::chat::ConnectedUsers* users) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(users_);
  }
  users_ = users;
  if (users) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.users)
}
inline ::chat::ConnectedUsers* ServerResponse::release_users() {
  _has_bits_[0] &= ~0x00000002u;
  ::chat::ConnectedUsers* temp = users_;
  users_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::ConnectedUsers* ServerResponse::unsafe_arena_release_users() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.users)
  _has_bits_[0] &= ~0x00000002u;
  ::chat::ConnectedUsers* temp = users_;
  users_ = nullptr;
  return temp;
}
inline ::chat::ConnectedUsers* ServerResponse::_internal_mutable_users() {
  _has_bits_[0] |= 0x00000002u;
  if (users_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ConnectedUsers>(GetArenaForAllocation());
    users_ = p;
  }
  return users_;
}
inline ::chat::ConnectedUsers* ServerResponse::mutable_users() {
  ::chat::ConnectedUsers* _msg = _internal_mutable_users();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.users)
  return _msg;
}
inline void ServerResponse::set_allocated_users(::chat::ConnectedUsers* users) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete users_;
  }
  if (users) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(users);
    if (message_arena != submessage_arena) {
      users = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, users, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  users_ = users;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.users)
}

// optional .chat.UserInformation user = 5;
inline bool ServerResponse::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || user_ != nullptr);
  return value;
}
inline bool ServerResponse::has_user() const {
  return _internal_has_user();
}
inline void ServerResponse::clear_user() {
  if (user_ != nullptr) user_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::UserInformation& ServerResponse::_internal_user() const {
  const ::chat::UserInformation* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserInformation&>(
      ::chat::_UserInformation_default_instance_);
}
inline const ::chat::UserInformation& ServerResponse::user() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.user)
  return _internal_user();
}
inline void ServerResponse::unsafe_arena_set_allocated_user(
    ::chat::UserInformation* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.user)
}
inline ::chat::UserInformation* ServerResponse::release_user() {
  _has_bits_[0] &= ~0x00000004u;
  ::chat::UserInformation* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::UserInformation* ServerResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.user)
  _has_bits_[0] &= ~0x00000004u;
  ::chat::UserInformation* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::chat::UserInformation* ServerResponse::_internal_mutable_user() {
  _has_bits_[0] |= 0x00000004u;
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserInformation>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::chat::UserInformation* ServerResponse::mutable_user() {
  ::chat::UserInformation* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.user)
  return _msg;
}
inline void ServerResponse::set_allocated_user(::chat::UserInformation* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.user)
}

// optional .chat.Message message = 6;
inline bool ServerResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool ServerResponse::has_message() const {
  return _internal_has_message();
}
inline void ServerResponse::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::Message& ServerResponse::_internal_message() const {
  const ::chat::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::Message&>(
      ::chat::_Message_default_instance_);
}
inline const ::chat::Message& ServerResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.message)
  return _internal_message();
}
inline void ServerResponse::unsafe_arena_set_allocated_message(
    ::chat::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.message)
}
inline ::chat::Message* ServerResponse::release_message() {
  _has_bits_[0] &= ~0x00000008u;
  ::chat::Message* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::Message* ServerResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.message)
  _has_bits_[0] &= ~0x00000008u;
  ::chat::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::chat::Message* ServerResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000008u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::Message>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::chat::Message* ServerResponse::mutable_message() {
  ::chat::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.message)
  return _msg;
}
inline void ServerResponse::set_allocated_message(::chat::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.message)
}

// optional .chat.ChangeStatus status = 7;
inline bool ServerResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool ServerResponse::has_status() const {
  return _internal_has_status();
}
inline void ServerResponse::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::chat::ChangeStatus& ServerResponse::_internal_status() const {
  const ::chat::ChangeStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ChangeStatus&>(
      ::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& ServerResponse::status() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.status)
  return _internal_status();
}
inline void ServerResponse::unsafe_arena_set_allocated_status(
    ::chat::ChangeStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.status)
}
inline ::chat::ChangeStatus* ServerResponse::release_status() {
  _has_bits_[0] &= ~0x00000010u;
  ::chat::ChangeStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::ChangeStatus* ServerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.status)
  _has_bits_[0] &= ~0x00000010u;
  ::chat::ChangeStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* ServerResponse::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000010u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::chat::ChangeStatus* ServerResponse::mutable_status() {
  ::chat::ChangeStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.status)
  return _msg;
}
inline void ServerResponse::set_allocated_status(::chat::ChangeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::ClientRequest_Option> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ClientRequest_Option>() {
  return ::chat::ClientRequest_Option_descriptor();
}
template <> struct is_proto_enum< ::chat::ServerResponse_Option> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ServerResponse_Option>() {
  return ::chat::ServerResponse_Option_descriptor();
}
template <> struct is_proto_enum< ::chat::ServerResponse_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ServerResponse_Code>() {
  return ::chat::ServerResponse_Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proyecto_2eproto
