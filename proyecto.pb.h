// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proyecto.proto

#ifndef PROTOBUF_proyecto_2eproto__INCLUDED
#define PROTOBUF_proyecto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proyecto_2eproto();
void protobuf_AssignDesc_proyecto_2eproto();
void protobuf_ShutdownFile_proyecto_2eproto();

class UserRegistration;
class ChangeStatus;
class Message;
class UserInformation;
class UserRequest;
class ConnectedUsers;
class ClientRequest;
class ServerResponse;

enum ClientRequest_Option {
  ClientRequest_Option_USER_LOGIN = 1,
  ClientRequest_Option_CONNECTED_USERS = 2,
  ClientRequest_Option_USER_INFORMATION = 3,
  ClientRequest_Option_STATUS_CHANGE = 4,
  ClientRequest_Option_SEND_MESSAGE = 5
};
bool ClientRequest_Option_IsValid(int value);
const ClientRequest_Option ClientRequest_Option_Option_MIN = ClientRequest_Option_USER_LOGIN;
const ClientRequest_Option ClientRequest_Option_Option_MAX = ClientRequest_Option_SEND_MESSAGE;
const int ClientRequest_Option_Option_ARRAYSIZE = ClientRequest_Option_Option_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientRequest_Option_descriptor();
inline const ::std::string& ClientRequest_Option_Name(ClientRequest_Option value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientRequest_Option_descriptor(), value);
}
inline bool ClientRequest_Option_Parse(
    const ::std::string& name, ClientRequest_Option* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientRequest_Option>(
    ClientRequest_Option_descriptor(), name, value);
}
enum ServerResponse_Option {
  ServerResponse_Option_USER_LOGIN = 1,
  ServerResponse_Option_CONNECTED_USERS = 2,
  ServerResponse_Option_USER_INFORMATION = 3,
  ServerResponse_Option_STATUS_CHANGE = 4,
  ServerResponse_Option_SEND_MESSAGE = 5
};
bool ServerResponse_Option_IsValid(int value);
const ServerResponse_Option ServerResponse_Option_Option_MIN = ServerResponse_Option_USER_LOGIN;
const ServerResponse_Option ServerResponse_Option_Option_MAX = ServerResponse_Option_SEND_MESSAGE;
const int ServerResponse_Option_Option_ARRAYSIZE = ServerResponse_Option_Option_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerResponse_Option_descriptor();
inline const ::std::string& ServerResponse_Option_Name(ServerResponse_Option value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerResponse_Option_descriptor(), value);
}
inline bool ServerResponse_Option_Parse(
    const ::std::string& name, ServerResponse_Option* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerResponse_Option>(
    ServerResponse_Option_descriptor(), name, value);
}
enum ServerResponse_Code {
  ServerResponse_Code_FAILED_OPERATION = 1,
  ServerResponse_Code_SUCCESSFUL_OPERATION = 2
};
bool ServerResponse_Code_IsValid(int value);
const ServerResponse_Code ServerResponse_Code_Code_MIN = ServerResponse_Code_FAILED_OPERATION;
const ServerResponse_Code ServerResponse_Code_Code_MAX = ServerResponse_Code_SUCCESSFUL_OPERATION;
const int ServerResponse_Code_Code_ARRAYSIZE = ServerResponse_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerResponse_Code_descriptor();
inline const ::std::string& ServerResponse_Code_Name(ServerResponse_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerResponse_Code_descriptor(), value);
}
inline bool ServerResponse_Code_Parse(
    const ::std::string& name, ServerResponse_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerResponse_Code>(
    ServerResponse_Code_descriptor(), name, value);
}
// ===================================================================

class UserRegistration : public ::google::protobuf::Message {
 public:
  UserRegistration();
  virtual ~UserRegistration();

  UserRegistration(const UserRegistration& from);

  inline UserRegistration& operator=(const UserRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegistration& default_instance();

  void Swap(UserRegistration* other);

  // implements Message ----------------------------------------------

  UserRegistration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRegistration& from);
  void MergeFrom(const UserRegistration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:chat.UserRegistration)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* ip_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static UserRegistration* default_instance_;
};
// -------------------------------------------------------------------

class ChangeStatus : public ::google::protobuf::Message {
 public:
  ChangeStatus();
  virtual ~ChangeStatus();

  ChangeStatus(const ChangeStatus& from);

  inline ChangeStatus& operator=(const ChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeStatus& default_instance();

  void Swap(ChangeStatus* other);

  // implements Message ----------------------------------------------

  ChangeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeStatus& from);
  void MergeFrom(const ChangeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:chat.ChangeStatus)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* status_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static ChangeStatus* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string receiver = 1;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline const ::std::string& receiver() const;
  inline void set_receiver(const ::std::string& value);
  inline void set_receiver(const char* value);
  inline void set_receiver(const char* value, size_t size);
  inline ::std::string* mutable_receiver();
  inline ::std::string* release_receiver();
  inline void set_allocated_receiver(::std::string* receiver);

  // optional string sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:chat.Message)
 private:
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* receiver_;
  ::std::string* sender_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class UserInformation : public ::google::protobuf::Message {
 public:
  UserInformation();
  virtual ~UserInformation();

  UserInformation(const UserInformation& from);

  inline UserInformation& operator=(const UserInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInformation& default_instance();

  void Swap(UserInformation* other);

  // implements Message ----------------------------------------------

  UserInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInformation& from);
  void MergeFrom(const UserInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:chat.UserInformation)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* ip_;
  ::std::string* status_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static UserInformation* default_instance_;
};
// -------------------------------------------------------------------

class UserRequest : public ::google::protobuf::Message {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest& default_instance();

  void Swap(UserRequest* other);

  // implements Message ----------------------------------------------

  UserRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:chat.UserRequest)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static UserRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConnectedUsers : public ::google::protobuf::Message {
 public:
  ConnectedUsers();
  virtual ~ConnectedUsers();

  ConnectedUsers(const ConnectedUsers& from);

  inline ConnectedUsers& operator=(const ConnectedUsers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectedUsers& default_instance();

  void Swap(ConnectedUsers* other);

  // implements Message ----------------------------------------------

  ConnectedUsers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectedUsers& from);
  void MergeFrom(const ConnectedUsers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.UserInformation users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::chat::UserInformation& users(int index) const;
  inline ::chat::UserInformation* mutable_users(int index);
  inline ::chat::UserInformation* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::chat::UserInformation >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::chat::UserInformation >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:chat.ConnectedUsers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat::UserInformation > users_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static ConnectedUsers* default_instance_;
};
// -------------------------------------------------------------------

class ClientRequest : public ::google::protobuf::Message {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  ClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientRequest_Option Option;
  static const Option USER_LOGIN = ClientRequest_Option_USER_LOGIN;
  static const Option CONNECTED_USERS = ClientRequest_Option_CONNECTED_USERS;
  static const Option USER_INFORMATION = ClientRequest_Option_USER_INFORMATION;
  static const Option STATUS_CHANGE = ClientRequest_Option_STATUS_CHANGE;
  static const Option SEND_MESSAGE = ClientRequest_Option_SEND_MESSAGE;
  static inline bool Option_IsValid(int value) {
    return ClientRequest_Option_IsValid(value);
  }
  static const Option Option_MIN =
    ClientRequest_Option_Option_MIN;
  static const Option Option_MAX =
    ClientRequest_Option_Option_MAX;
  static const int Option_ARRAYSIZE =
    ClientRequest_Option_Option_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Option_descriptor() {
    return ClientRequest_Option_descriptor();
  }
  static inline const ::std::string& Option_Name(Option value) {
    return ClientRequest_Option_Name(value);
  }
  static inline bool Option_Parse(const ::std::string& name,
      Option* value) {
    return ClientRequest_Option_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .chat.ClientRequest.Option option = 1;
  inline bool has_option() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 1;
  inline ::chat::ClientRequest_Option option() const;
  inline void set_option(::chat::ClientRequest_Option value);

  // optional .chat.UserRegistration newuser = 2;
  inline bool has_newuser() const;
  inline void clear_newuser();
  static const int kNewuserFieldNumber = 2;
  inline const ::chat::UserRegistration& newuser() const;
  inline ::chat::UserRegistration* mutable_newuser();
  inline ::chat::UserRegistration* release_newuser();
  inline void set_allocated_newuser(::chat::UserRegistration* newuser);

  // optional .chat.UserRequest user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::chat::UserRequest& user() const;
  inline ::chat::UserRequest* mutable_user();
  inline ::chat::UserRequest* release_user();
  inline void set_allocated_user(::chat::UserRequest* user);

  // optional .chat.ChangeStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline const ::chat::ChangeStatus& status() const;
  inline ::chat::ChangeStatus* mutable_status();
  inline ::chat::ChangeStatus* release_status();
  inline void set_allocated_status(::chat::ChangeStatus* status);

  // optional .chat.Message message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::chat::Message& message() const;
  inline ::chat::Message* mutable_message();
  inline ::chat::Message* release_message();
  inline void set_allocated_message(::chat::Message* message);

  // @@protoc_insertion_point(class_scope:chat.ClientRequest)
 private:
  inline void set_has_option();
  inline void clear_has_option();
  inline void set_has_newuser();
  inline void clear_has_newuser();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::chat::UserRegistration* newuser_;
  ::chat::UserRequest* user_;
  ::chat::ChangeStatus* status_;
  ::chat::Message* message_;
  int option_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static ClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  void Swap(ServerResponse* other);

  // implements Message ----------------------------------------------

  ServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerResponse_Option Option;
  static const Option USER_LOGIN = ServerResponse_Option_USER_LOGIN;
  static const Option CONNECTED_USERS = ServerResponse_Option_CONNECTED_USERS;
  static const Option USER_INFORMATION = ServerResponse_Option_USER_INFORMATION;
  static const Option STATUS_CHANGE = ServerResponse_Option_STATUS_CHANGE;
  static const Option SEND_MESSAGE = ServerResponse_Option_SEND_MESSAGE;
  static inline bool Option_IsValid(int value) {
    return ServerResponse_Option_IsValid(value);
  }
  static const Option Option_MIN =
    ServerResponse_Option_Option_MIN;
  static const Option Option_MAX =
    ServerResponse_Option_Option_MAX;
  static const int Option_ARRAYSIZE =
    ServerResponse_Option_Option_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Option_descriptor() {
    return ServerResponse_Option_descriptor();
  }
  static inline const ::std::string& Option_Name(Option value) {
    return ServerResponse_Option_Name(value);
  }
  static inline bool Option_Parse(const ::std::string& name,
      Option* value) {
    return ServerResponse_Option_Parse(name, value);
  }

  typedef ServerResponse_Code Code;
  static const Code FAILED_OPERATION = ServerResponse_Code_FAILED_OPERATION;
  static const Code SUCCESSFUL_OPERATION = ServerResponse_Code_SUCCESSFUL_OPERATION;
  static inline bool Code_IsValid(int value) {
    return ServerResponse_Code_IsValid(value);
  }
  static const Code Code_MIN =
    ServerResponse_Code_Code_MIN;
  static const Code Code_MAX =
    ServerResponse_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    ServerResponse_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return ServerResponse_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return ServerResponse_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return ServerResponse_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .chat.ServerResponse.Option option = 1;
  inline bool has_option() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 1;
  inline ::chat::ServerResponse_Option option() const;
  inline void set_option(::chat::ServerResponse_Option value);

  // optional .chat.ServerResponse.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::chat::ServerResponse_Code code() const;
  inline void set_code(::chat::ServerResponse_Code value);

  // optional string response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // optional .chat.ConnectedUsers users = 4;
  inline bool has_users() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 4;
  inline const ::chat::ConnectedUsers& users() const;
  inline ::chat::ConnectedUsers* mutable_users();
  inline ::chat::ConnectedUsers* release_users();
  inline void set_allocated_users(::chat::ConnectedUsers* users);

  // optional .chat.UserInformation user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::chat::UserInformation& user() const;
  inline ::chat::UserInformation* mutable_user();
  inline ::chat::UserInformation* release_user();
  inline void set_allocated_user(::chat::UserInformation* user);

  // optional .chat.Message message = 6;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 6;
  inline const ::chat::Message& message() const;
  inline ::chat::Message* mutable_message();
  inline ::chat::Message* release_message();
  inline void set_allocated_message(::chat::Message* message);

  // optional .chat.ChangeStatus status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline const ::chat::ChangeStatus& status() const;
  inline ::chat::ChangeStatus* mutable_status();
  inline ::chat::ChangeStatus* release_status();
  inline void set_allocated_status(::chat::ChangeStatus* status);

  // @@protoc_insertion_point(class_scope:chat.ServerResponse)
 private:
  inline void set_has_option();
  inline void clear_has_option();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_users();
  inline void clear_has_users();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int option_;
  int code_;
  ::std::string* response_;
  ::chat::ConnectedUsers* users_;
  ::chat::UserInformation* user_;
  ::chat::Message* message_;
  ::chat::ChangeStatus* status_;
  friend void  protobuf_AddDesc_proyecto_2eproto();
  friend void protobuf_AssignDesc_proyecto_2eproto();
  friend void protobuf_ShutdownFile_proyecto_2eproto();

  void InitAsDefaultInstance();
  static ServerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// UserRegistration

// optional string username = 1;
inline bool UserRegistration::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRegistration::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRegistration::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRegistration::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserRegistration::username() const {
  // @@protoc_insertion_point(field_get:chat.UserRegistration.username)
  return *username_;
}
inline void UserRegistration::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:chat.UserRegistration.username)
}
inline void UserRegistration::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.UserRegistration.username)
}
inline void UserRegistration::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.UserRegistration.username)
}
inline ::std::string* UserRegistration::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.UserRegistration.username)
  return username_;
}
inline ::std::string* UserRegistration::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRegistration::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegistration.username)
}

// optional string ip = 2;
inline bool UserRegistration::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRegistration::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRegistration::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRegistration::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UserRegistration::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserRegistration.ip)
  return *ip_;
}
inline void UserRegistration::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:chat.UserRegistration.ip)
}
inline void UserRegistration::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.UserRegistration.ip)
}
inline void UserRegistration::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.UserRegistration.ip)
}
inline ::std::string* UserRegistration::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.UserRegistration.ip)
  return ip_;
}
inline ::std::string* UserRegistration::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRegistration::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegistration.ip)
}

// -------------------------------------------------------------------

// ChangeStatus

// optional string username = 1;
inline bool ChangeStatus::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeStatus::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeStatus::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeStatus::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ChangeStatus::username() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.username)
  return *username_;
}
inline void ChangeStatus::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.username)
}
inline void ChangeStatus::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatus.username)
}
inline void ChangeStatus::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatus.username)
}
inline ::std::string* ChangeStatus::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.username)
  return username_;
}
inline ::std::string* ChangeStatus::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeStatus::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.username)
}

// optional string status = 2;
inline bool ChangeStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeStatus::clear_status() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& ChangeStatus::status() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.status)
  return *status_;
}
inline void ChangeStatus::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.status)
}
inline void ChangeStatus::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatus.status)
}
inline void ChangeStatus::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatus.status)
}
inline ::std::string* ChangeStatus::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.status)
  return status_;
}
inline ::std::string* ChangeStatus::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeStatus::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.status)
}

// -------------------------------------------------------------------

// Message

// optional string receiver = 1;
inline bool Message::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_receiver() {
  if (receiver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_->clear();
  }
  clear_has_receiver();
}
inline const ::std::string& Message::receiver() const {
  // @@protoc_insertion_point(field_get:chat.Message.receiver)
  return *receiver_;
}
inline void Message::set_receiver(const ::std::string& value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
  // @@protoc_insertion_point(field_set:chat.Message.receiver)
}
inline void Message::set_receiver(const char* value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.receiver)
}
inline void Message::set_receiver(const char* value, size_t size) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.receiver)
}
inline ::std::string* Message::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.receiver)
  return receiver_;
}
inline ::std::string* Message::release_receiver() {
  clear_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receiver_;
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_receiver(::std::string* receiver) {
  if (receiver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiver_;
  }
  if (receiver) {
    set_has_receiver();
    receiver_ = receiver;
  } else {
    clear_has_receiver();
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.receiver)
}

// optional string sender = 2;
inline bool Message::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& Message::sender() const {
  // @@protoc_insertion_point(field_get:chat.Message.sender)
  return *sender_;
}
inline void Message::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:chat.Message.sender)
}
inline void Message::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.sender)
}
inline void Message::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.sender)
}
inline ::std::string* Message::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.sender)
  return sender_;
}
inline ::std::string* Message::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.sender)
}

// optional string text = 3;
inline bool Message::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Message::text() const {
  // @@protoc_insertion_point(field_get:chat.Message.text)
  return *text_;
}
inline void Message::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:chat.Message.text)
}
inline void Message::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.text)
}
inline void Message::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.text)
}
inline ::std::string* Message::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.text)
  return text_;
}
inline ::std::string* Message::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.text)
}

// -------------------------------------------------------------------

// UserInformation

// optional string username = 1;
inline bool UserInformation::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInformation::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInformation::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInformation::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserInformation::username() const {
  // @@protoc_insertion_point(field_get:chat.UserInformation.username)
  return *username_;
}
inline void UserInformation::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:chat.UserInformation.username)
}
inline void UserInformation::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.UserInformation.username)
}
inline void UserInformation::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.UserInformation.username)
}
inline ::std::string* UserInformation::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.UserInformation.username)
  return username_;
}
inline ::std::string* UserInformation::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInformation::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.UserInformation.username)
}

// optional string ip = 2;
inline bool UserInformation::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInformation::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInformation::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInformation::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UserInformation::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserInformation.ip)
  return *ip_;
}
inline void UserInformation::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:chat.UserInformation.ip)
}
inline void UserInformation::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.UserInformation.ip)
}
inline void UserInformation::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.UserInformation.ip)
}
inline ::std::string* UserInformation::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.UserInformation.ip)
  return ip_;
}
inline ::std::string* UserInformation::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInformation::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.UserInformation.ip)
}

// optional string status = 3;
inline bool UserInformation::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInformation::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInformation::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInformation::clear_status() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& UserInformation::status() const {
  // @@protoc_insertion_point(field_get:chat.UserInformation.status)
  return *status_;
}
inline void UserInformation::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set:chat.UserInformation.status)
}
inline void UserInformation::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.UserInformation.status)
}
inline void UserInformation::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.UserInformation.status)
}
inline ::std::string* UserInformation::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.UserInformation.status)
  return status_;
}
inline ::std::string* UserInformation::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInformation::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.UserInformation.status)
}

// -------------------------------------------------------------------

// UserRequest

// optional string user = 1;
inline bool UserRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UserRequest::user() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.user)
  return *user_;
}
inline void UserRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:chat.UserRequest.user)
}
inline void UserRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.UserRequest.user)
}
inline void UserRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.UserRequest.user)
}
inline ::std::string* UserRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.user)
  return user_;
}
inline ::std::string* UserRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.user)
}

// -------------------------------------------------------------------

// ConnectedUsers

// repeated .chat.UserInformation users = 1;
inline int ConnectedUsers::users_size() const {
  return users_.size();
}
inline void ConnectedUsers::clear_users() {
  users_.Clear();
}
inline const ::chat::UserInformation& ConnectedUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUsers.users)
  return users_.Get(index);
}
inline ::chat::UserInformation* ConnectedUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUsers.users)
  return users_.Mutable(index);
}
inline ::chat::UserInformation* ConnectedUsers::add_users() {
  // @@protoc_insertion_point(field_add:chat.ConnectedUsers.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::UserInformation >&
ConnectedUsers::users() const {
  // @@protoc_insertion_point(field_list:chat.ConnectedUsers.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::chat::UserInformation >*
ConnectedUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:chat.ConnectedUsers.users)
  return &users_;
}

// -------------------------------------------------------------------

// ClientRequest

// optional .chat.ClientRequest.Option option = 1;
inline bool ClientRequest::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientRequest::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientRequest::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientRequest::clear_option() {
  option_ = 1;
  clear_has_option();
}
inline ::chat::ClientRequest_Option ClientRequest::option() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.option)
  return static_cast< ::chat::ClientRequest_Option >(option_);
}
inline void ClientRequest::set_option(::chat::ClientRequest_Option value) {
  assert(::chat::ClientRequest_Option_IsValid(value));
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientRequest.option)
}

// optional .chat.UserRegistration newuser = 2;
inline bool ClientRequest::has_newuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientRequest::set_has_newuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientRequest::clear_has_newuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientRequest::clear_newuser() {
  if (newuser_ != NULL) newuser_->::chat::UserRegistration::Clear();
  clear_has_newuser();
}
inline const ::chat::UserRegistration& ClientRequest::newuser() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.newuser)
  return newuser_ != NULL ? *newuser_ : *default_instance_->newuser_;
}
inline ::chat::UserRegistration* ClientRequest::mutable_newuser() {
  set_has_newuser();
  if (newuser_ == NULL) newuser_ = new ::chat::UserRegistration;
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.newuser)
  return newuser_;
}
inline ::chat::UserRegistration* ClientRequest::release_newuser() {
  clear_has_newuser();
  ::chat::UserRegistration* temp = newuser_;
  newuser_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_newuser(::chat::UserRegistration* newuser) {
  delete newuser_;
  newuser_ = newuser;
  if (newuser) {
    set_has_newuser();
  } else {
    clear_has_newuser();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.newuser)
}

// optional .chat.UserRequest user = 3;
inline bool ClientRequest::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientRequest::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientRequest::clear_user() {
  if (user_ != NULL) user_->::chat::UserRequest::Clear();
  clear_has_user();
}
inline const ::chat::UserRequest& ClientRequest::user() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::chat::UserRequest* ClientRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::chat::UserRequest;
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.user)
  return user_;
}
inline ::chat::UserRequest* ClientRequest::release_user() {
  clear_has_user();
  ::chat::UserRequest* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_user(::chat::UserRequest* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.user)
}

// optional .chat.ChangeStatus status = 4;
inline bool ClientRequest::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientRequest::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientRequest::clear_status() {
  if (status_ != NULL) status_->::chat::ChangeStatus::Clear();
  clear_has_status();
}
inline const ::chat::ChangeStatus& ClientRequest::status() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::chat::ChangeStatus* ClientRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::chat::ChangeStatus;
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.status)
  return status_;
}
inline ::chat::ChangeStatus* ClientRequest::release_status() {
  clear_has_status();
  ::chat::ChangeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_status(::chat::ChangeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.status)
}

// optional .chat.Message message = 5;
inline bool ClientRequest::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientRequest::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientRequest::clear_message() {
  if (message_ != NULL) message_->::chat::Message::Clear();
  clear_has_message();
}
inline const ::chat::Message& ClientRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.ClientRequest.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::chat::Message* ClientRequest::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::chat::Message;
  // @@protoc_insertion_point(field_mutable:chat.ClientRequest.message)
  return message_;
}
inline ::chat::Message* ClientRequest::release_message() {
  clear_has_message();
  ::chat::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_message(::chat::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientRequest.message)
}

// -------------------------------------------------------------------

// ServerResponse

// optional .chat.ServerResponse.Option option = 1;
inline bool ServerResponse::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerResponse::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerResponse::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerResponse::clear_option() {
  option_ = 1;
  clear_has_option();
}
inline ::chat::ServerResponse_Option ServerResponse::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.option)
  return static_cast< ::chat::ServerResponse_Option >(option_);
}
inline void ServerResponse::set_option(::chat::ServerResponse_Option value) {
  assert(::chat::ServerResponse_Option_IsValid(value));
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:chat.ServerResponse.option)
}

// optional .chat.ServerResponse.Code code = 2;
inline bool ServerResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerResponse::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::chat::ServerResponse_Code ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.code)
  return static_cast< ::chat::ServerResponse_Code >(code_);
}
inline void ServerResponse::set_code(::chat::ServerResponse_Code value) {
  assert(::chat::ServerResponse_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:chat.ServerResponse.code)
}

// optional string response = 3;
inline bool ServerResponse::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerResponse::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerResponse::clear_response() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& ServerResponse::response() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.response)
  return *response_;
}
inline void ServerResponse::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.response)
}
inline void ServerResponse::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ServerResponse.response)
}
inline void ServerResponse::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ServerResponse.response)
}
inline ::std::string* ServerResponse::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.response)
  return response_;
}
inline ::std::string* ServerResponse::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerResponse::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.response)
}

// optional .chat.ConnectedUsers users = 4;
inline bool ServerResponse::has_users() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerResponse::set_has_users() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerResponse::clear_has_users() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerResponse::clear_users() {
  if (users_ != NULL) users_->::chat::ConnectedUsers::Clear();
  clear_has_users();
}
inline const ::chat::ConnectedUsers& ServerResponse::users() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.users)
  return users_ != NULL ? *users_ : *default_instance_->users_;
}
inline ::chat::ConnectedUsers* ServerResponse::mutable_users() {
  set_has_users();
  if (users_ == NULL) users_ = new ::chat::ConnectedUsers;
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.users)
  return users_;
}
inline ::chat::ConnectedUsers* ServerResponse::release_users() {
  clear_has_users();
  ::chat::ConnectedUsers* temp = users_;
  users_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_users(::chat::ConnectedUsers* users) {
  delete users_;
  users_ = users;
  if (users) {
    set_has_users();
  } else {
    clear_has_users();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.users)
}

// optional .chat.UserInformation user = 5;
inline bool ServerResponse::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerResponse::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerResponse::clear_user() {
  if (user_ != NULL) user_->::chat::UserInformation::Clear();
  clear_has_user();
}
inline const ::chat::UserInformation& ServerResponse::user() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::chat::UserInformation* ServerResponse::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::chat::UserInformation;
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.user)
  return user_;
}
inline ::chat::UserInformation* ServerResponse::release_user() {
  clear_has_user();
  ::chat::UserInformation* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_user(::chat::UserInformation* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.user)
}

// optional .chat.Message message = 6;
inline bool ServerResponse::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerResponse::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerResponse::clear_message() {
  if (message_ != NULL) message_->::chat::Message::Clear();
  clear_has_message();
}
inline const ::chat::Message& ServerResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::chat::Message* ServerResponse::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::chat::Message;
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.message)
  return message_;
}
inline ::chat::Message* ServerResponse::release_message() {
  clear_has_message();
  ::chat::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_message(::chat::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.message)
}

// optional .chat.ChangeStatus status = 7;
inline bool ServerResponse::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerResponse::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerResponse::clear_status() {
  if (status_ != NULL) status_->::chat::ChangeStatus::Clear();
  clear_has_status();
}
inline const ::chat::ChangeStatus& ServerResponse::status() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::chat::ChangeStatus* ServerResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::chat::ChangeStatus;
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.status)
  return status_;
}
inline ::chat::ChangeStatus* ServerResponse::release_status() {
  clear_has_status();
  ::chat::ChangeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_status(::chat::ChangeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::ClientRequest_Option> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ClientRequest_Option>() {
  return ::chat::ClientRequest_Option_descriptor();
}
template <> struct is_proto_enum< ::chat::ServerResponse_Option> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ServerResponse_Option>() {
  return ::chat::ServerResponse_Option_descriptor();
}
template <> struct is_proto_enum< ::chat::ServerResponse_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ServerResponse_Code>() {
  return ::chat::ServerResponse_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proyecto_2eproto__INCLUDED
